# Needham Schroeder public key

# 1.  	A	->	B	:  	{Na, A}KPb
# 2.  	B	->	A	:  	{Na, Nb}KPa
# 3.  	A	->	B	:  	{Nb}KPb

# Strong secrecy of Nb
# 6.  B      ->     : {m}Nb versus {m}K with K fresh




free a.
free b.
free c.

free skc.
free m.

free c0.
free c1.
free c2.
free c3.


let A ca a b ska pkb =
 in(ca,xinit);
 new na;
 out(ca, aenc((na,a),pkb));
 in(ca,xenc);
 let (x1,x2) = adec(xenc,ska) in
 if x1 =na then
 out(ca, aenc(x2,pkb)).


let Breal cb b a skb pka=
 in(cb,yenc);
 let (y1,y2) = adec(yenc,skb) in
 if y2 = a then (
    new nb;
    out(cb,aenc((y1,nb),pka));
    in(cb,ychall);
    let y = adec(ychall,skb) in
    if y = nb then out(cb, senc(m,nb))).
  

let Bideal cb b a skb pka=
 in(cb,yenc);
 let (y1,y2) = adec(yenc,skb) in
 if y2 = a then (
    new nb;
    out(cb,aenc((y1,nb),pka));
    in(cb,ychall);
    let y = adec(ychall,skb) in
    if y = nb then new k; out(cb, senc(m,k))).



let P =
 new ska; new skb; let pka= pk(ska) in let pkb = pk(skb) in  let pkc = pk(skc) in
 ( in(c0,z);out(c0,pka);out(c0,pkb) |  (A c1 a c ska pkc) |(Breal c2 b a skb pka)).
 


let Q =
 new ska; new skb; let pka= pk(ska) in let pkb = pk(skb) in let pkc = pk(skc) in
 (in(c0,z);out(c0,pka);out(c0,pkb)  |  (A c1 a c ska pkc) |(Bideal c2 b a skb pka)).
 

equivalence P and Q.
