(* public communication channel *)
free c.
free cs.
free cm.

free cs2.
free cm2.

free cs3.
free cm3.

(* public identity of MS *)
free imsi_wtn.

(* constant values *)
fun macFail/0.
fun syncFail/0.
fun reject/0.

(* UMTS AKA protocol specific mac and key generation functions *)
fun f1/2.
fun f2/2.
fun f3/2.
fun f4/2.
fun f5/2.
fun cst/0.

let AKA_MS k osqn c = 
    new r_ms;
    in(c, x);
    let (xrand, xautn) = x in (
    let (msg, xmac) = xautn in (
    let ak = f5(k, xrand) in (
    let xsqn = sdec(ak, msg) in (
    let mac = f1(k, (xrand, xsqn)) in (
    if xmac = mac then (
       if xsqn = osqn then (
       	  let res = f2(k, xrand) in (
	  let ck = f3(k, xrand) in (
	  let ik = f4(k, xrand) in (
	  out(c, res);
	  in(c, xmsg)))))
        else (out(c, syncFail)))
    else (out(c, macFail))))))).

let AKA_SN k osqn c =
    new rand;
    new r_sn;
    new s;
    new r;
    let mac = f1(k, (rand, osqn)) in (
    let res = f2(k, rand) in (
    let ck = f3(k, rand) in (
    let ik = f4(k, rand) in (
    let ak = f5(k, rand) in (
    let autn = (senc((ak, r_sn), osqn), mac) in (
    let av = (rand, res, ck, ik, ak) in (
    out(c, (rand, autn));
    in(c, xres);
    if xres = res then (       
       out(c, senc((ck, r), s));
       out(c, senc(cst, ck))
    )
    else (
       out(c, reject))))))))).

let AKA_SN_n k osqn c =
    new rand;
    new r_sn;
    new s;
    new r;
    let mac = f1(k, (rand, osqn)) in (
    let res = f2(k, rand) in (
    let ck = f3(k, rand) in (
    let ik = f4(k, rand) in (
    let ak = f5(k, rand) in (
    let autn = (senc((ak, r_sn), osqn), mac) in (
    let av = (rand, res, ck, ik, ak) in (
    out(c, (rand, autn));
    in(c, xres);
    if xres = res then (       
       out(c, senc((ck, r), s));
       new n; out(c, senc(n, ck))
    )
    else (
       out(c, reject))))))))).

let MS k osqn c =  (AKA_MS k osqn c).
let SN k osqn c =  (AKA_SN k osqn c).

let Proto_l = in(c,zz);
  new k;
  new osqn; 
 ((AKA_MS k osqn cm) | (AKA_SN k osqn cs)).

let Proto_r = in(c,zz);
  new k;
  new osqn; 
 ((AKA_MS k osqn cm) | (AKA_SN_n k osqn cs)).

equivalence Proto_l and Proto_r.
