## WMF POUR APTE
free i1.
free i2.
free i3.
free a.
free c.
free c2.
free c3.
free c_a.
free c_b.
free c_s.
free c_a2.
free c_b2.
free c_s2.
free c_a3.
free c_b3.
free c_s3.
free ok.

let A m kas c_a =
 in(c_a, xx);
 new kab;
 out(c_a, senc((i1,kab),kas));
 out(c_a, senc((i2,m),kab)).

let S kas ksb c_s =
 in(c_s, x);
 let (x1,y) = sdec(x,kas) in
 if x1 = i1
 then
   out(c_s, senc((i3,y),ksb)).

let B ksb c_b =
 in(c_b, x);
 let (x1,y) = sdec(x,ksb) in
 if x1 = i3
 then
   in(c_b, z);
   let (x2,w) = sdec(z,y) in
   if x2 = i2
   then
     out(c_b,ok).

let Inst m c_a c_s c_b =
 new K_as;
 new K_sb;
 ((A m K_as c_a) | (S K_as K_sb c_s) | (B K_as c_b)).

let B_Spec m ksb c_b =
 in(c_b, x);
 let (x1,y) = sdec(x,ksb) in
 if x1 = i3
 then
   in(c_b,z);
   let (x2,w) = sdec(z,y) in
   if x2 = i2
   then
     if w = m
     then
       out(c_b,ok).

let Inst_Spec m c_a c_s c_b =
 new K_as;
 new K_sb;
 ((A m K_as c_a) | (S K_as K_sb c_s) | (B_Spec m K_as c_b)).

# One session
let Auth1 = 
in(c,x);
(Inst x c_a c_s c_b).

let Auth2 = 
in(c,x);
(Inst_Spec x c_a c_s c_b).

# Two sessions
let Auth1_2s = 
(in(c,x);
(Inst x c_a c_s c_b))
|
(in(c2,x);
(Inst x c_a2 c_s2 c_b2)).

let Auth2_2s = 
(in(c,x);
(Inst_Spec x c_a c_s c_b))
|
(in(c2,x);
(Inst_Spec x c_a2 c_s2 c_b2)).

# Three sessions
let Auth1_3s = 
(in(c,x);
(Inst x c_a c_s c_b))
|
(in(c2,x);
(Inst x c_a2 c_s2 c_b2))
|
(in(c3,x);
(Inst x c_a3 c_s3 c_b3)).


let Auth2_3s = 
(in(c,x);
(Inst_Spec x c_a c_s c_b))
|
(in(c2,x);
(Inst_Spec x c_a2 c_s2 c_b2))
|
(in(c3,x);
(Inst_Spec x c_a3 c_s3 c_b3)).


equivalence Auth1 and Auth2.
