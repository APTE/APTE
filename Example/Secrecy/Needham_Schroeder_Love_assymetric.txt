# Needham Schroeder Symmetric Key
#
# Principal A,B,S
#
# Key know by the principal : 
# K_as -> A, S
# K_bs -> B ,S
# K_ab fresh generated by S

free A.
free B.
free I.
free c.
free c_s.
free k_I.

#######################################
#    Description of principal S :     #
#######################################

let processS k_A k_B k_I k_S=
  in(c_s,x); 
  (
  (if x = A then out(c_s,sign((A,pk(k_A)),k_S)))
  | 
  (if x = B then out(c_s,sign((B,pk(k_B)),k_S)))
  |
  (if x = I then out(c_s,sign((I,pk(k_I)),k_S)))
  ).

#######################################
#    Description of principal A :     #
#######################################

let processA k_S k_A =
  new N_a;
  out(c,aenc((N_a,A),pk(k_I)));
  in(c,y);
  let (n_a,i,n_I) = adec(y,k_A) in
  if n_a = N_a && i = I
  then
    out(c,aenc(n_I,pk(k_I))).

#######################################
#    Description of principal B :     #
#######################################

let processB k_S k_B k_A =
  in(c,x);
  let (n_a,a) = adec(x,k_B) in
  
  if a = A
  then
    new N_b;
    secrecy N_b;
    out(c,aenc((n_a,B,N_b),pk(k_A)));
    in(c,y);
    if adec(y,k_B) = N_b
    then 0.

#######################################
#   		Main                  #
#######################################

let P =
  new k_A; new k_B; new k_S; out(c,pk(k_A)); out(c,pk(k_B)); (processA k_S k_A | processB k_S k_B k_A).

preserve secrecy P.