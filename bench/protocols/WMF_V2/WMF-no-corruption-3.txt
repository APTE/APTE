# Wide Mouthed Frog Symmetric Key
#
# 1.  A	->	S:  	{B, Kab}Kas
# 2.  S	->	B:  	{A, Kab}Kbs
# Strong secrecy of Kab
# 3.  B      ->     : {m1}Kab versus {m2}K with K fresh

free a.
free b.

free ca.
free cb.
free cs.

free m1.
free m2.
free start.

#######################################
#    Description of role A played:
# - on channel ca
# - by a with key kas (shared with the server S)
# - with responder b
#######################################

let processA ca a kas b =
  in(ca,x); 
  if x = start then
  new kab;
  out(ca,senc((b,kab),kas)).

#######################################
#    Description of role B played:    
# - on channel cb
# - by b with key kbs (shared with the server S)
# - with initiator a
#######################################

let processBreal cb b kbs a  =
  in(cb,yb);
  let (ya,yab)= sdec(yb,kbs) in
  if ya = a then  
     	out(cb,senc(m1,yab)).


let processBideal cb b kbs a  =
  in(cb,yb);
  let (ya,yab)= sdec(yb,kbs) in
  if ya = a then
 	new k;
	out(cb,senc(m2,k)).

#######################################
#    Description of role S played:    
# - on channel cs
# - to answer a request coming from a (with key kas) 
# - who wants to communicate with b (with key kbs) 
#######################################

let processS cs a kas b kbs =
	in(cs,zs); 
	let (zb,zab) = sdec(zs,kas) in 
	if zb =b then 
	out(cs,senc((a,zab),kbs)).

#######################################
#   			Main                  #
#######################################

let Preal = 
  new kas; new kbs; 
( processA ca a kas b |  processBreal  cb b kbs a | processS cs a kas
  b kbs).


let Pideal = 
  new kas; new kbs; 
( processA ca a kas b |  processBideal  cb b kbs a | processS cs a kas
  b kbs).

equivalence Preal and Pideal.
