# Denning Sacco symmetric key
#  A -> S : A, B
#  S -> A : {B, Kab, {Kab,A}Kbs }Kas
#  A -> B : {Kab, A }Kbs


# Secrecy of the key Kab (from the point of view of A)
# encoded as a combination of key usability and “which key-concealing”
# A -> : {m}Kab vs {m}K with K fresh and m/m public constants


# Scenario: double
# two sessions for each role, each played by the same honest agent




free a.
free b.

free m.


free c1.
free c2.
free c3.
free c4.
free c5.
free c6.


let A1 ca a b kas =
 in(ca,xinit);
 new na;
 out(ca, (a,b));
 in(ca,xenc);
 let (x1,x2,x3) = sdec(xenc,kas) in
 if x1 =b then
 out(ca, x3);
 out(ca,senc(m,x2)).

let A2 ca a b kas =
 in(ca,xinit);
 new na;
 out(ca, (a,b));
 in(ca,xenc);
 let (x1,x2,x3) = sdec(xenc,kas) in
 if x1 =b then
 out(ca, x3);
 new k;
 out(ca,senc(m,k)).

 
let S cs a b kas kbs =
 in(cs, y);
 let (y1,y2) = y in
 if (y1,y2) = (a,b) then
 new kab;
 out(cs, senc((b,kab,senc((kab,a),kbs)),kas)).


let B cb b a kbs =
 in(cb,z);
 let (z1,z2) = sdec(z,kbs) in
 if z2 = a then 0.
  

let P =
 new kas; new kbs; 
 ((A1 c1 a b kas) | (S c2 a b kas kbs) | (B c3 b a kbs)
 |(A1 c4 a b kas) | (S c5 a b kas kbs) | (B c6 b a kbs) ).


let Q =
 new kas; new kbs; 
 ((A2 c1 a b kas) | (S c2 a b kas kbs) | (B c3 b a kbs)
 |(A2 c4 a b kas) | (S c5 a b kas kbs) | (B c6 b a kbs)
).


equivalence P and Q.
