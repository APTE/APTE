# Private Authentication Protocol
#
# 1. A -> B: {Na, pub(A)}pub(B)
# 2. B -> A: {Na, Nb,pub(B)}pub(A) if B wants to communicate with A
#                  {Nb}pub(B) otherwise

free ca1.
free cb1.
free ca2.
free cb2.

free c.


#######################################
#    Description of role A played:
# - on channel ca
# - by the agent with private key ska 
# - with the agent with public key pkb
#######################################

let processA ca ska pkb =
  new na;
  out(ca,aenc((na,pk(ska)),pkb)); 
  in(ca,x).


#######################################
#    Description of role B played:
# - on channel cb
# - by the agent with private key skb 
# - with the agent with public key pka
#######################################

let processB cb skb pka =
  in(cb,yb); 
  let (yna,ypka) = adec(yb,skb) in	
  new nb; 
  if ypka = pka  then out(cb,aenc((yna,nb,pk(skb)),pka))
  else out(cb,aenc(nb,pk(skb))).
		


#######################################
# Main
#######################################

let ProcessAB = in(c,zz); 
  new ska0 ; new skb0 ; new skc0 ; out(c,pk(ska0)) ; out(c,pk(skb0)) ; out(c,pk(skc0)); 
  new ska1 ; new skb1; out(c,pk(ska1)) ; out(c,pk(skb1)) ;
  ( processA ca1 ska0 pk(skb0)  | processB cb1 skb0 pk(ska0) 
  | processA ca2 ska1 pk(skb1)  | processB cb2 skb1 pk(ska1) ).

let ProcessCB = in(c,zz);
 new ska0 ; new skb0 ; new skc0 ; out(c,pk(ska0)) ; out(c,pk(skb0)) ; out(c,pk(skc0)); 
  new ska1 ; new skb1; out(c,pk(ska1)) ; out(c,pk(skb1)) ;
  ( processA ca1 skc0 pk(skb0)  | processB cb1 skb0 pk(skc0) 
  | processA ca2 ska1 pk(skb1)  | processB cb2 skb1 pk(ska1) ).
  
  
equivalence ProcessAB and ProcessCB.
